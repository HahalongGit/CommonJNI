项目中如果添加了C语言的代码，需要设置头文件声明方法：
可以在Terminal 中采用java命令完成：

C语言：
1.新建一个java 类，包含了native 方法，重新编译项目，生成对应的java类的class文件。
2.采用javah 创建C语言头文件：
  在 Terminal中切换到C语言代码的目录下然后输入命令：
  javah -d jni -classpath 自己编译后的class文件的绝对路径(要生成的.h文件的路径 ??)
  （这里要注意，后边是编译后的class文件的绝对路径）
  执行完成会在对应的C语言的目录下创建一个jni目录，生成一个.h头文件。
  然后我们创建C语言文件，通过#include 引入这个头文件，创建实现对应的头文件中的方法，
  这样就可以在java代码中调用这些方法了。
  --》 本项目练习生成了cpp目录下jni包下的头文件。C语言使用的时候需要添加到代码中。

C语言执行过程：
1.形成目标代码
2.将目标代码与函数库相连接，代码合并
3.运行
4.预编译过程：#include 语句写在外面给预编译做准备，将完整的代码直接拷贝过来替换。程序中也可以把一个C文件作为另外一个C文件的include 文件引入
include 也就是拷贝我们需要的函数到我们的文件中使用而已。
（对比Java相当于.h文件是一个接口定义，我们自己定义的.h文件的实现就是我们的C文件。我们在自己的C文件中引入的其他的.h头文件相当于是java中导入包，我们调用
 其他包下的方法，调用的时候采用接口的形式调用，这个系统的.h文件的方法在系统的对应的其他C文件中已经实现过了）
5.<>这种括号表示系统库目录，“”这种include引入表示当前目录，自己的目录。
6.define 指令：
  1.定义标识
  #define TYPE 也就是类似于java定义一个常量,预处理，替换常量
  2.定义常数
  #define MIN 100;
  void main(){
       int b = 50;
       if(b<MIN){
       printf("b小于MIN了..");//MIN就相当于java中定义一个常量，define 没有指定类型，可以是数字，字符串等。
       }
  }
  define 定义和const 常量的定义不一样，const定义需要指定类型。
  3.define 定义宏函数
  #define GET_MIN(A,B)A<B?A:B
  int main(){
      int a = 100;
      int b = 200;
      int c = GET_MIN(a,b);
  }

C++ 语言：
C++代码中不需要设置头文件
方法名称对应native 方法声明的包名、类名和方法名：
比如包名是：com.lll.commonjni.utils 的类JNIUtils 中声明的方法
public native String stringFromJNI();

对应的C++代码中方法的实现是：
Java_com_lll_commonjni_utils_JNIUtils_stringFromJNI(
        JNIEnv *env,
        jobject /* this */) {
    std::string hello = "Hello from C++";
    return env->NewStringUTF(hello.c_str());
}
方法实现的名称是：Java+包名+类名+native方法的名称

注意：修改了java 代码，native方法对应的实现可能就会改变，需要及时修改C、C++对应的实现的代码方法名称。
