/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <android/log.h>
#include "com_lll_commonjni_NDKCppInteface.h"
#include "Student.h"
#include <iostream>
/* Header for class com_lll_commonjni_NDKCppInteface */


/*
 * Class:     com_lll_commonjni_NDKCppInteface
 * Method:    executeCppConst C++ 方式编写jni代码
 * Signature: ()V
 */
using namespace std;// 标准命名空间
extern "C"
JNIEXPORT void JNICALL Java_com_lll_commonjni_NDKCppInteface_executeCppConst
        (JNIEnv *env, jobject jobj) {
    const int a = 100;
    //    a = 200;  // 常量不能修改
    // 间接修改
    int *p = (int *) &a;
    *p = 200;
    __android_log_print(ANDROID_LOG_INFO, "main", "修改值：%d", a);// 采用andorid 的底层日志方式
    //指针修改的方式结果：100  结论，在C++ 中常量是不能修改的 ,在C语言中是可以修改的，但是和编译的环境有关系，Android 中都不能修改，VisualStudia 中可以修改C的常量

}

//int get_min(int a, int b) {
//    return a < b ? a : b;
//}

int get_min(int a, int b, int c, int d) {
    return a < b ? a : b;
}

typedef int(*GET_MIN_P)(int, int, int, int);// 为了方便给方法取别名 函数指针别名

JNIEXPORT void JNICALL Java_com_lll_commonjni_NDKCppInteface_executeCppFuncPointer
        (JNIEnv *, jobject) {
    //函数指针
//    int(* get_min_p) (int,int) = get_min;
//    int c = get_min(10,20);

    GET_MIN_P p = get_min;
    int c = p(10, 20, 30, 40);
    __android_log_print(ANDROID_LOG_INFO, "main", "最小值：%d", c);
}


//class Computer {
//private:
//    char *cpu;
//    char *display;
//    char *name;
//    int age;

// 自动生成的 get set 方法
//public:
//    char *getCpu() const {
//        return cpu;
//    }
//
//    void setCpu(char *cpu) {
//        Computer::cpu = cpu;
//    }
//
//    char *getName() const {
//        return name;
//    }
//
//    void setName(char *name) {
//        Computer::name = name;
//    }

//public:
//    void setCPU(char *cpu) {
//        this->cpu = cpu;
//    }
//
//    char *getCPU() {
//        return this->cpu;
//    }
//
//    void setDisplay(char *display) {
//        this->display = display;
//    }
//
//    char *getDisplay() {
//        return this->display;
//    }
//
//    void setAge(int age) {
//        this->age = age;
//    }
//
//    int getAge() {
//        return this->age;
//    }
//
//};
/**
 * C++ 中类的定义
 */
//#include "Computer.h" // 全局类的定义，引用的时候引入头文件执行
#include "Computer.h" // 这里的Cpp 实现类表示没有添加道编译工具中，直接添加头文件报错，添加实现Cpp类可以执行
#include "Student.h"
#include "Teacher.h"

JNIEXPORT void JNICALL Java_com_lll_commonjni_NDKCppInteface_executeCppClass
        (JNIEnv *, jobject) {
//    Computer computer; // 创建对象 可以不用 new
//    computer.setAge(5);
//    computer.setCPU("i7770HQ");
//    computer.setDisplay("2G独立显卡");
//    __android_log_print(ANDROID_LOG_INFO, "main", "显卡4：%s,CPU：%s,年龄：%d", computer.getDisplay(),
//                        computer.getCpu(), computer.getAge());
    // 上面的这种方式 析构函数执行，下面的new 的方式 析构函数不执行？？？ new 关键字创建的对象 要手动释放内存才会执行

//    Computer computer1 = new Computer();//Types 'Computer' and 'Computer *' are not compatible 这样的写法类型不兼容

    Computer *computer = new Computer(); /// 可以new 一个对象 传递 对象的 引用（指针地址）
    computer->setDisplay("2G独立显卡");
    computer->setCPU("i7770hq");
    computer->setAge(4);
    __android_log_print(ANDROID_LOG_INFO, "main", "显卡4：%s,CPU：%s,年龄：%d", computer->getDisplay(),
                        computer->getCpu(), computer->getAge());
    delete computer; // 手动释放内存 析构函数会执行

}

/**
 * 浅拷贝和深拷贝
 */
JNIEXPORT void JNICALL Java_com_lll_commonjni_NDKCppInteface_executeCppCopy
        (JNIEnv *env, jobject jobj) {
    // 1.系统默认的就是浅拷贝 值
    // 浅拷贝默认拷贝的是值，如果是引用则拷贝引用地址 ，如果拷贝后去释放两个对象的内存，就会出错，第二次释放的是一个无效的对象
    //
    Computer computer("北京地铁", 80);
    __android_log_print(ANDROID_LOG_INFO, "main", "name:%s--age:%d", computer.getName(),
                        computer.getAge());
    // 2.深拷贝
    //开辟一块内存区域在堆中，结果对应两个对象 ，两次释放两个对象
}


// 对象属性的初始化
// 在创建C++ 的类中 添加一个对象的属性会报错，这个对象的属性必须要初始化..
// 初始化的方式：(语法规定)
// 1.对应提供对象的类添加无参数的构造方法
// 2.提供对象属性的这个对象添加一个默认的值 或者在属性创建的时候直接创建这个对象
JNIEXPORT void JNICALL Java_com_lll_commonjni_NDKCppInteface_initObjectAttribute
        (JNIEnv *env, jobject jobj) {
    //
//    Teacher teacher1 =  Teacher("龙龙班主任");// Teacher *teacher1 = Teacher("龙龙班主任");  这种方式也不对
//    Teacher teacher2 =  Teacher("天翔老师");
//    Student student = Student("sisi");
//    Student student = Student("陈国军", teacher1, teacher2);// 注意，和java中初始化对象属性不同
    // 上述初始化的代码报错。检测不到错误所在...
}


// C++ 中new 关键字和 delete 关键字的使用
// 基本数据类型要 用new
// int *p = new int[10];
// 释放内存 delete [] p;// 或者 free(p)

// 对象的创建和释放
// *** Teacher teacher = Teacher();// 这种方式开辟的是栈内存 自动管理
// Teacher *teacher = new Teacher(); // 开辟的是堆内存 手动释放
// teacher->.setName("刘老师");
// free(teacher); //delete teacher;  //new 关键字创建的对象要手动释放才会调用析构函数


// static 关键字
//
#include "StaticClass.h"
//StaticClass
JNIEXPORT void JNICALL Java_com_lll_commonjni_NDKCppInteface_executeStaticKey
        (JNIEnv *, jobject) {
    StaticClass staticClass = StaticClass("dream");
    //staticClass.age = 100; //静态属性能不能赋值？ 编译报错
}

// 指针和 引用的区别（什么时候用指针，什么时候用引用？）
extern "C"
JNIEXPORT void JNICALL Java_com_lll_commonjni_NDKCppInteface_callCppPointerAndRefDiff
        (JNIEnv *, jobject) {
    // 指针和引用：
    //1.指针是内存地址，引用只是内存地址的别名，并且程序要为指针变量分配内存，引用不需要分配内存区域
//    int a = 100;
//    int &b = a; // b是a的引用
//    int *p = &a;// p是a的指针
//    __android_log_print(ANDROID_LOG_INFO, "main", "引用b的地址%p", &b);
//    __android_log_print(ANDROID_LOG_INFO, "main", "变量a的地址%p", &a);
//    __android_log_print(ANDROID_LOG_INFO, "main", "指针p的地址%p", &p);
    // 结果是：
    //    03-05 10:27:04.255 30582-30582/com.lll.commonjni I/main: 引用b的地址0xffb540a8
    //    03-05 10:27:04.255 30582-30582/com.lll.commonjni I/main: 变量a的地址0xffb540a8
    //    03-05 10:27:04.255 30582-30582/com.lll.commonjni I/main: 指针p的地址0xffb540a4

    //2.引用在使用的时候不需要*接引用，但是指针需要解引用
//    int a = 100;
//    int &b = a; // b是a的引用
//    int *p = &a;// p是a的指针
//    __android_log_print(ANDROID_LOG_INFO, "main", "变量a的地址%p", a);// 直接写a 结果就是a的值
//    __android_log_print(ANDROID_LOG_INFO, "main", "指针p的地址%p", &p);// a 的值需要 【*p】才能获取到 ，这就是使用*解引用，p是指针是不能直接打印的

    //3.引用只能被初始化一次，之后不能再更改信息，但是指针可以
//    int a = 100;
//    int b = 200; // b是a的引用
//    int &c = a;
//    int *p = &a;// p是a的指针
//    &c = b; // 这种写法是错误的，不能修改赋值
//    p = &b; // 指针可以修改重新赋值，指向b的内存地址

    // 4.引用不能为NULL,指针可以
//    int a = 100;
//    int b = 200; // b是a的引用
//    int &c = NULL;// 这写法是错误的
//    int *p = NULL;// p可以是一个NULL

    // 5.sizeof(引用)得到的是引用所指向的变量的大小，sizeof(指针)得到的是指针本身的大小
//    double a = 100;
//    double &b = a;
//    double *p = &a;// p是a的指针
//    __android_log_print(ANDROID_LOG_INFO,"main","b引用的大小：%d", sizeof(b));//引用的大小，引用是值本身的大小 是double 类型的，占8字节
//    __android_log_print(ANDROID_LOG_INFO,"main","p指针的大小:%d", sizeof(p));// 指针的大小，指针本身是一个地址，地址是int 类型的占4个字节
    // 6.指针（++ 或者-- ）代表的是地址的位移，引用实际上对应值的改变
    int a = 100;
    int &b = a;
    int *p = &a;
    __android_log_print(ANDROID_LOG_INFO,"main","p++前p指针的值:%p", p);// 打印地址
    b++;
    p++;
    __android_log_print(ANDROID_LOG_INFO,"main","b引用的大小:%d", b);// 打印值
    __android_log_print(ANDROID_LOG_INFO,"main","p++后p指针的值:%p", p);// 打印地址
    // 结果：
//    03-05 11:51:12.800 13912-13912/com.lll.commonjni I/main: p++前p指针的值:0xffb540a8
//    03-05 11:51:12.800 13912-13912/com.lll.commonjni I/main: b引用的大小:101
//    03-05 11:51:12.800 13912-13912/com.lll.commonjni I/main: p++后p指针的值:0xffb540ac
    // 指针p++ 后的结果可能已经是一个未知的数据了，也可能报错
}
